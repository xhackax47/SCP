spring.application.name=SCP
spring.config.import=optional:file:.env[.properties]
# ===============================
# = DATA SOURCE
# ===============================
# Set here configurations for the database connection
spring.datasource.url=${POSTGRES_HOST}
spring.datasource.username=${POSTGRES_USER}
spring.datasource.password=${POSTGRES_PASSWORD}
spring.datasource.driver-class-name=${POSTGRES_DRIVER-CLASS-NAME}
# Keep the connection alive if idle for a long time (needed in production)
#spring.datasource.testWhileIdle=true
#spring.datasource.validationQuery=SELECT 1
# ===============================
# = JPA / HIBERNATE
# ===============================
# Show or not log for each sql query
spring.jpa.show-sql=${JPA_SHOW-SQL}
#hibernate.show_sql: true
# Hibernate ddl auto (create, create-drop, update): with "create-drop" the database
# schema will be automatically created afresh for every start of application
spring.jpa.hibernate.ddl-auto=${JPA_DDL-AUTO}
# Naming strategy
spring.jpa.hibernate.naming.implicit-strategy=${JPA_IMPLICIT-STRATEGY}
#spring.jpa.hibernate.naming.physical-strategy=org.springframework.boot.orm.jpa.hibernate.SpringPhysicalNamingStrategy
spring.jpa.hibernate.naming.physical-strategy=${JPA_PHYSICAL-STRATEGY}
# Allows Hibernate to generate SQL optimized for a particular DBMS
spring.jpa.properties.hibernate.dialect=${JPA_DIALECT}

# OpenAI
spring.ai.openai.api-key=${OPENAI_API-KEY}
#spring.ai.openai.api-key=env.get

# Securité
spring.security.user.name=${SECURITY_USERNAME}
spring.security.user.password=${SECURITY_PASSWORD}
ALGO_CRYPT=${ALGO_CRYPT}
